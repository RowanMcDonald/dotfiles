# vi: ft=bash

#====================
# Ruby
#====================
# Run a command in each subdirectory of a
# git tracked directory that has a Gemfile.
in_each_ruby_dir(){
  local root=$(git rev-parse --show-toplevel)
  cd $root

  for g in $(find . -name 'Gemfile'); do
    pushd $(dirname ${g})
    $@
    popd
  done
}

# run rubocop on files changed since the base branch that are under the current dir
rubo() {
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local base_commit_of_branch=$(diff -u <(git rev-list --first-parent $current_branch) <(git rev-list --first-parent main) | sed -ne 's/^ //p' | head -1)
  git diff-tree -r --no-commit-id --name-only --relative head $base_commit_of_branch | xargs ls -d 2>/dev/null | xargs bundle exec rubocop --auto-correct
}

#===================
# Dotfiles tracking
#===================
dots() {
   /usr/bin/git --git-dir=$HOME/dotfiles/ --work-tree=$HOME $@
}

#==================================
# macOS
#==================================
notify() {
	osascript -e "display notification \"$@\" with title \"iterm notification\""
}

#==================================
# Switch iterm profile
#==================================
set_profile_large_text() {
  echo -e "\033]50;SetProfile=LargeText\a"
}

set_profile_default() {
  echo -e "\033]50;SetProfile=Default\a"
}

set_profile_light() {
  echo -e "\033]50;SetProfile=Light\a"
}

#==================================
# This solves the issue of "There are 3 other sessions using the database"
#==================================
function pg_kill_conn() {
    echo "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$1' AND pid <> pg_backend_pid(); \d" | psql template1
}

#==================================
# FZF functions
#==================================

fzf-down() {
  fzf --height 50% "$@" --border
}

# fgl 'some words' - select among figlet fonts form the given string
fgl() {
  [ $# -eq 0 ] && return
  cd /usr/local/Cellar/figlet/*/share/figlet/fonts
  local font=$(ls *.flf | sort | fzf --no-multi --reverse --preview "figlet -f {} $@" --preview-window up) &&
  figlet -f "$font" "$@" | pbcopy
  cd -
}

# co - checkout git branch/tag
co() {
  local tags branches target
  tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") | sed '/^$/d' |
    fzf-down --no-hscroll --reverse --ansi +m -d "\t" -n 2 -q "rowan/$*") || return
  git checkout $(echo "$target" | awk '{print $2}')
}

j() {
  if [[ -z "$*" ]]; then
    cd "$(_z -l 2>&1 | fzf +s --tac | sed 's/^[0-9,.]* *//')"
    pwd
  else
    _last_z_args="$@"
    _z "$@"
    pwd
  fi
}

jj() {
  cd "$(_z -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf -q "$_last_z_args")"
  pwd
}

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

# gh - browse changed files
gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

# gb git browse branches
gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -200' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

# gh - git commit browse
gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -200' |
  grep -o "[a-f0-9]\{7,\}"
}

gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}

stash() {
  is_in_git_repo || return
  git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
  cut -d: -f1
}

# https://github.com/HipsterBrown/hip-dotfiles/blob/ddb12e35a2992afa216ce03a74cc26f88d392c29/.zshrc#L61
gd() {
  local branches branch
  branches=$(git branch --all) &&
  branch=$(echo "$branches" | fzf-down --no-hscroll --reverse --ansi -m -q "rowan/$*") &&
    git branch -D $(echo "$branch" | sed "s/.* //")
}

#===================
# Toggle dir stack h/t Omar.
#===================

toggle_top_two_stack() {
    if [[ "$1" != "" ]]
    then
        pushd "$1"
        return
    fi
    if [[ "$top_stack" == "" ]]
    then
        tmp_top_stack=$(pwd)
        tmp_top_stack_display=$(pwd | sed "s#$HOME# ~#")
        popd >/dev/null
        if [[ "$?" == "0" ]]
        then
            top_stack="$tmp_top_stack"
            top_stack_display="$tmp_top_stack_display"
        else
            echo "nowhere to go"
        fi
    else
        pushd "$top_stack" >/dev/null
        top_stack=""
        top_stack_display=""
    fi
    export top_stack
}
alias kk="toggle_top_two_stack"


how_many() {
  rg -F --vimgrep $1 | wc -l
}

lint() {
  bundle exec standardrb;
  bundle exec erblint --lint-all -a
  git add .
  git commit -m "Lint"
}

function open_pr() {
  github_url=`git remote -v | awk '/fetch/{print $2}' | sed -Ee 's#(git@|git://)#https://#' -e 's@com:@com/@' -e 's%\.git$%%' | awk '/github/'`;
  branch_name=`git symbolic-ref HEAD | cut -d"/" -f 3,4`;
  pr_url=$github_url"/compare/main..."$branch_name
  open $pr_url;
}

function gpr() {
  git push origin HEAD

  if [ $? -eq 0 ]; then
    open_pr
  else
    echo 'failed to push commits and open a pull request.';
  fi
}

function ff() {
  echo "... zoooooommm"
  git pull origin main --ff-only
  if [[ -n $(git status --porcelain) ]]; then
    git add --all
    git commit --quiet --message=temp
    git rebase main
    git reset HEAD~1
  else
    git rebase main
  fi
}
