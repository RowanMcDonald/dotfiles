# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet rspec "require 'rails_helper'; RSpec.desc..." b
require "rails_helper"

RSpec.describe ${1:`!p snip.rv = snip.basename[:-5].title().replace('_', '')`} do
	subject { described_class.new(${0}) }

	describe "#${2:method}" do
		it "${3}" do
			${4}
		end
	end
end
endsnippet

snippet desc
describe ${1:`!p snip.rv = snip.basename[:-5].title().replace('_', '')`} do
	${0}
end
endsnippet

snippet rdesc
RSpec.describe ${1:`!p snip.rv = snip.basename[:-5].title().replace('_', '')`} do
	${0}
end
endsnippet

snippet dm
describe "#${1:method}" do
	${0:pending 'Not implemented'}
end
endsnippet

snippet cont
context "${1:message}" do
	${0}
end
endsnippet

snippet bef
before :${1:each} do
	${0}
end
endsnippet

snippet aft
after :${1:each} do
	${0}
end
endsnippet

snippet let
let(:${1:object}) { ${0} }
endsnippet

snippet let!
let!(:${1:object}) { ${0} }
endsnippet

snippet subj
subject { ${0} }
endsnippet

snippet s.
subject.${0:method}
endsnippet

snippet spec
specify { subject.${0} }
endsnippet

snippet exp
expect(${1:object}).to ${0}
endsnippet

snippet expb
expect { ${1:object} }.to ${0}
endsnippet

snippet experr
expect { ${1:object} }.to raise_error ${2:StandardError}, /${0:message_regex}/
endsnippet

snippet allow
allow(${1:object}).to ${0}
endsnippet

snippet shared
shared_examples ${0:"shared examples name"}
endsnippet

snippet ibl
it_behaves_like ${0:"shared examples name"}
endsnippet

snippet it
it "${1:spec_name}" do
	${0}
end
endsnippet

snippet its
its(:${1:method}) { should ${0} }
endsnippet

snippet is
it { should ${0} }
endsnippet

snippet isn
it { should_not ${0} }
endsnippet

snippet iexp
it { expect(${1:object}).${2} ${0} }
endsnippet

snippet iexpb
it { expect { ${1:object} }.${2} ${0} }
endsnippet

snippet iiexp
it { is_expected.to ${0} }
endsnippet

snippet iiexpn
it { is_expected.not_to ${0} }
endsnippet

snippet agg
aggregate_failures "${1:message}" do
	${0}
end
endsnippet

